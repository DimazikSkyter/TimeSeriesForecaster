import json
import logging
import os
from pathlib import Path

import pandas as pd
import plotly.express as px
import streamlit as st

from forecaster_main.infrastructure.io_data import (
    LoadParams, CsvSource, PrometheusSource,
    ClickHouseSource, ClickhouseParams
)
from forecaster_main.predictor.models import PredictParams
from forecaster_main.predictor.predictor_service import SingleSeriesModelPredictor, ForecastParams
from forecaster_main.infrastructure.logging import LoggingParams

FORECASTER_FILE_PATH: str = os.getenv('FORECASTER_FILE_PATH',
                                      str(Path(__file__).parent / "forecaster_params.json"))
st.set_page_config(page_title="Metric Forecaster", layout="wide")
st.title("üìà Metric Forecaster Prototype")
st.caption("–ó–∞–≥—Ä—É–∑–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
models = ["trend"]
if "df" not in st.session_state:
    st.session_state["df"] = None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞, –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–∏—Å
with open(FORECASTER_FILE_PATH, "r", encoding="utf-8") as f:
    json_obj = json.load(f)
forecaster_params: ForecastParams = ForecastParams(**json_obj)
logging_level = os.getenv('LOGGING_LEVEL', 'INFO')
level = logging.getLevelName(logging_level.upper())
ssmp: SingleSeriesModelPredictor = SingleSeriesModelPredictor(forecaster_params, LoggingParams(level=level))

# --- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ---
source_type = st.selectbox(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
    ["CSV/Excel", "Prometheus/Victoria", "ClickHouse"]
)

# CSV / Excel
if source_type == "CSV/Excel":
    file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel", type=["csv", "xlsx"])
    if file is not None:
        loader = CsvSource()
        params = LoadParams(path=file)
        df = loader.load(params)
        st.session_state["df"] = df

# Prometheus / Victoria
elif source_type == "Prometheus/Victoria":
    uri = st.text_input("URI", "http://localhost:8428")
    query = st.text_input("Query", "up")
    start = st.date_input("Start date")
    end = st.date_input("End date")
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å"):
        loader = PrometheusSource()
        params = LoadParams(
            uri=uri,
            query=query,
            start=pd.Timestamp(start),
            end=pd.Timestamp(end),
        )
        df = loader.load(params)
        st.session_state["df"] = df

# ClickHouse
elif source_type == "ClickHouse":
    host = st.text_input("Host", "localhost")
    port = st.number_input("Port", 8123)
    user = st.text_input("User", "default")
    password = st.text_input("Password", type="password")
    database = st.text_input("Database", "default")
    table = st.text_input("Table", "timeseries")
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å"):
        params = LoadParams(ch_table=table)
        ch_params = ClickhouseParams(
            ch_host=host,
            ch_port=port,
            ch_user=user,
            ch_password=password,
            ch_database=database,
        )
        loader = ClickHouseSource(ch_params)
        df = loader.load(params)
        st.session_state["df"] = df

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
if st.session_state["df"] is not None:
    df = st.session_state["df"]

    st.subheader("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df.head())

    fig = px.line(df, x=df.index, y=df.columns, title="–ú–µ—Ç—Ä–∏–∫–∏")
    st.plotly_chart(fig, use_container_width=True)

    # --- Forecast UI ---
    st.subheader("üîÆ Forecast")

    horizon = st.number_input("Horizon (–∫–æ–ª-–≤–æ —Ç–æ—á–µ–∫)", min_value=1, value=10)
    mode = st.radio("–û—Ç–∫—É–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å?", ["–° –∫–æ–Ω—Ü–∞ —Ä—è–¥–∞", "–° –Ω–æ–º–µ—Ä–∞ –∏–Ω–¥–µ–∫—Å–∞"])

    start_idx = None
    if mode == "–° –Ω–æ–º–µ—Ä–∞ –∏–Ω–¥–µ–∫—Å–∞":
        start_idx = st.number_input("–ù–æ–º–µ—Ä —Ç–æ—á–∫–∏ (0..N-1)", min_value=0, max_value=len(df) - 1, value=len(df) - 5)

    series_list = df.columns.tolist()
    selected_series = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥", series_list)
    st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏:", selected_series)

    st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏:**")
    use_sarimax = st.checkbox("SARIMAX", value=True)
    use_arima = st.checkbox("ARIMA")
    use_prophet = st.checkbox("Prophet")
    use_lstm = st.checkbox("LSTM")

    if use_sarimax:
        models.append("sarimax")
    if use_arima:
        models.append("arima")
    if use_prophet:
        models.append("prophet")
    if use_lstm:
        models.append("lstm")

    if selected_series and st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        if not models:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å!")
        chosen_series = df[selected_series]
        print(f"Current index {chosen_series.index.inferred_type}")
        if start_idx:
            chosen_series = chosen_series.iloc[:start_idx]

        if horizon > len(chosen_series) // 2:
            st.warning("Horizon –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–ª–∏–Ω—ã —Ä—è–¥–∞ ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º.")

        forecast_df = ssmp.predict(chosen_series, PredictParams(models_names=models, horizon=horizon))

        # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        st.subheader("üìà –ü—Ä–æ–≥–Ω–æ–∑")
        st.dataframe(forecast_df)

        fig_fcst = px.line(forecast_df, title="Forecasts by models")
        st.plotly_chart(fig_fcst, use_container_width=True)
